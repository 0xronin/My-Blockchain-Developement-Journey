{
  "address": "0x4bA8bC3C9465789fb0c4EdC99baed074A8C62A52",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x48c470df63358d85776fa983077a10a9a4ada68ba2ef9f48c055814addb9ccd2",
  "receipt": {
    "to": null,
    "from": "0x4c244043d70CC47Dbc3Fe8f0D8E8216A1f63b62b",
    "contractAddress": "0x4bA8bC3C9465789fb0c4EdC99baed074A8C62A52",
    "transactionIndex": 5,
    "gasUsed": "1048691",
    "logsBloom": "0x
    "blockHash": "0x1c917e9a5ea3574b0a8ab6911093cde601449a5f354e8d30b86dd8ece8129988",
    "transactionHash": "0x48c470df63358d85776fa983077a10a9a4ada68ba2ef9f48c055814addb9ccd2",
    "logs": [],
    "blockNumber": 10974627,
    "cumulativeGasUsed": "1654885",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 2,
  "solcInputHash": "cc759eb59354056ec2063619d46bacbf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0xRonin\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample of funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Pragma\\npragma solidity ^0.8.8;\\n// Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n// Error Codes\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, Contracts\\n\\n\\n/** @title A contract for crowd funding\\n * @author 0xRonin\\n * @notice This contract is to demo a sample of funding contract\\n * @dev This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n    // Type Declarations \\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface public s_priceFeed;\\n        \\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    // constructor\\n    // receive\\n    // fallback\\n    // external\\n    // public\\n    // internal\\n    // private\\n    // view/pure\\n    \\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n    /** \\n     * @notice This function funds this contract\\n     * @dev This implements price feeds as our library\\n    */\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    function withdraw() payable onlyOwner public {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory\\n\\n        for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    // View / Pure\\n    function getOwner() public view returns(address){\\n        return i_owner;\\n    }\\n    \\n    function getFunder(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n}\\n\\n\",\"keccak256\":\"0xeabfd3fc9ad7e94fdc0b04ea4a98aba387bbbc0d988dd031c0800cf22c3d1bda\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa8ffab96f46fa376d7b9dd4fe6d86701448dac694e72154c8cb728618a56df6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200132038038062001320833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61119a620001866000396000818161023f0152818161048e01528181610618015261080e015261119a6000f3fe6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101285780639e87a5cd14610153578063b60d42881461017e578063be2693f014610188578063d7b4750c1461019257610086565b80630343fb251461008b5780630ec3b027146100c85780633ccfd60b146100f35780636b69a592146100fd575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610ad2565b6101cf565b6040516100bf9190610b18565b60405180910390f35b3480156100d457600080fd5b506100dd610217565b6040516100ea9190610b92565b60405180910390f35b6100fb61023d565b005b34801561010957600080fd5b5061011261047d565b60405161011f9190610b18565b60405180910390f35b34801561013457600080fd5b5061013d61048a565b60405161014a9190610bbc565b60405180910390f35b34801561015f57600080fd5b506101686104b2565b6040516101759190610b92565b60405180910390f35b6101866104dc565b005b610190610616565b005b34801561019e57600080fd5b506101b960048036038101906101b49190610c03565b6108a4565b6040516101c69190610bbc565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561036d576000600182815481106102e8576102e7610c30565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061036590610c8e565b9150506102c5565b50600067ffffffffffffffff81111561038957610388610cd7565b5b6040519080825280602002602001820160405280156103b75781602001602082028036833780820191505090505b50600190805190602001906103cd9291906109c8565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103f490610d37565b60006040518083038185875af1925050503d8060008114610431576040519150601f19603f3d011682016040523d82523d6000602084013e610436565b606091505b505090508061047a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047190610da9565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061051b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ec90919063ffffffff16565b101561055c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055390610e15565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105aa9190610e35565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561071f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106d5575b5050505050905060005b81518110156107a957600082828151811061074757610746610c30565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107a190610c8e565b915050610729565b50600067ffffffffffffffff8111156107c5576107c4610cd7565b5b6040519080825280602002602001820160405280156107f35781602001602082028036833780820191505090505b50600190805190602001906108099291906109c8565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161085090610d37565b60006040518083038185875af1925050503d806000811461088d576040519150601f19603f3d011682016040523d82523d6000602084013e610892565b606091505b50509050806108a057600080fd5b5050565b6000600182815481106108ba576108b9610c30565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108f883610928565b90506000670de0b6b3a764000085836109119190610e8b565b61091b9190610f14565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097157600080fd5b505afa158015610985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a99190610fd2565b5050509150506402540be400816109c0919061104d565b915050919050565b828054828255906000526020600020908101928215610a41579160200282015b82811115610a405782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109e8565b5b509050610a4e9190610a52565b5090565b5b80821115610a6b576000816000905550600101610a53565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9f82610a74565b9050919050565b610aaf81610a94565b8114610aba57600080fd5b50565b600081359050610acc81610aa6565b92915050565b600060208284031215610ae857610ae7610a6f565b5b6000610af684828501610abd565b91505092915050565b6000819050919050565b610b1281610aff565b82525050565b6000602082019050610b2d6000830184610b09565b92915050565b6000819050919050565b6000610b58610b53610b4e84610a74565b610b33565b610a74565b9050919050565b6000610b6a82610b3d565b9050919050565b6000610b7c82610b5f565b9050919050565b610b8c81610b71565b82525050565b6000602082019050610ba76000830184610b83565b92915050565b610bb681610a94565b82525050565b6000602082019050610bd16000830184610bad565b92915050565b610be081610aff565b8114610beb57600080fd5b50565b600081359050610bfd81610bd7565b92915050565b600060208284031215610c1957610c18610a6f565b5b6000610c2784828501610bee565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c9982610aff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ccc57610ccb610c5f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d21600083610d06565b9150610d2c82610d11565b600082019050919050565b6000610d4282610d14565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d93600b83610d4c565b9150610d9e82610d5d565b602082019050919050565b60006020820190508181036000830152610dc281610d86565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610dff601b83610d4c565b9150610e0a82610dc9565b602082019050919050565b60006020820190508181036000830152610e2e81610df2565b9050919050565b6000610e4082610aff565b9150610e4b83610aff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e8057610e7f610c5f565b5b828201905092915050565b6000610e9682610aff565b9150610ea183610aff565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eda57610ed9610c5f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f1f82610aff565b9150610f2a83610aff565b925082610f3a57610f39610ee5565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f6481610f45565b8114610f6f57600080fd5b50565b600081519050610f8181610f5b565b92915050565b6000819050919050565b610f9a81610f87565b8114610fa557600080fd5b50565b600081519050610fb781610f91565b92915050565b600081519050610fcc81610bd7565b92915050565b600080600080600060a08688031215610fee57610fed610a6f565b5b6000610ffc88828901610f72565b955050602061100d88828901610fa8565b945050604061101e88828901610fbd565b935050606061102f88828901610fbd565b925050608061104088828901610f72565b9150509295509295909350565b600061105882610f87565b915061106383610f87565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110a2576110a1610c5f565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110df576110de610c5f565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561111c5761111b610c5f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561115957611158610c5f565b5b82820290509291505056fea26469706673582212205884ea47d5665d1a9955777793bab443136fd2190c47cf3e15bab07a3356d5cf64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101285780639e87a5cd14610153578063b60d42881461017e578063be2693f014610188578063d7b4750c1461019257610086565b80630343fb251461008b5780630ec3b027146100c85780633ccfd60b146100f35780636b69a592146100fd575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610ad2565b6101cf565b6040516100bf9190610b18565b60405180910390f35b3480156100d457600080fd5b506100dd610217565b6040516100ea9190610b92565b60405180910390f35b6100fb61023d565b005b34801561010957600080fd5b5061011261047d565b60405161011f9190610b18565b60405180910390f35b34801561013457600080fd5b5061013d61048a565b60405161014a9190610bbc565b60405180910390f35b34801561015f57600080fd5b506101686104b2565b6040516101759190610b92565b60405180910390f35b6101866104dc565b005b610190610616565b005b34801561019e57600080fd5b506101b960048036038101906101b49190610c03565b6108a4565b6040516101c69190610bbc565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561036d576000600182815481106102e8576102e7610c30565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061036590610c8e565b9150506102c5565b50600067ffffffffffffffff81111561038957610388610cd7565b5b6040519080825280602002602001820160405280156103b75781602001602082028036833780820191505090505b50600190805190602001906103cd9291906109c8565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103f490610d37565b60006040518083038185875af1925050503d8060008114610431576040519150601f19603f3d011682016040523d82523d6000602084013e610436565b606091505b505090508061047a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047190610da9565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061051b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ec90919063ffffffff16565b101561055c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055390610e15565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105aa9190610e35565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561071f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106d5575b5050505050905060005b81518110156107a957600082828151811061074757610746610c30565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107a190610c8e565b915050610729565b50600067ffffffffffffffff8111156107c5576107c4610cd7565b5b6040519080825280602002602001820160405280156107f35781602001602082028036833780820191505090505b50600190805190602001906108099291906109c8565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161085090610d37565b60006040518083038185875af1925050503d806000811461088d576040519150601f19603f3d011682016040523d82523d6000602084013e610892565b606091505b50509050806108a057600080fd5b5050565b6000600182815481106108ba576108b9610c30565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108f883610928565b90506000670de0b6b3a764000085836109119190610e8b565b61091b9190610f14565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097157600080fd5b505afa158015610985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a99190610fd2565b5050509150506402540be400816109c0919061104d565b915050919050565b828054828255906000526020600020908101928215610a41579160200282015b82811115610a405782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109e8565b5b509050610a4e9190610a52565b5090565b5b80821115610a6b576000816000905550600101610a53565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9f82610a74565b9050919050565b610aaf81610a94565b8114610aba57600080fd5b50565b600081359050610acc81610aa6565b92915050565b600060208284031215610ae857610ae7610a6f565b5b6000610af684828501610abd565b91505092915050565b6000819050919050565b610b1281610aff565b82525050565b6000602082019050610b2d6000830184610b09565b92915050565b6000819050919050565b6000610b58610b53610b4e84610a74565b610b33565b610a74565b9050919050565b6000610b6a82610b3d565b9050919050565b6000610b7c82610b5f565b9050919050565b610b8c81610b71565b82525050565b6000602082019050610ba76000830184610b83565b92915050565b610bb681610a94565b82525050565b6000602082019050610bd16000830184610bad565b92915050565b610be081610aff565b8114610beb57600080fd5b50565b600081359050610bfd81610bd7565b92915050565b600060208284031215610c1957610c18610a6f565b5b6000610c2784828501610bee565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c9982610aff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ccc57610ccb610c5f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d21600083610d06565b9150610d2c82610d11565b600082019050919050565b6000610d4282610d14565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d93600b83610d4c565b9150610d9e82610d5d565b602082019050919050565b60006020820190508181036000830152610dc281610d86565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610dff601b83610d4c565b9150610e0a82610dc9565b602082019050919050565b60006020820190508181036000830152610e2e81610df2565b9050919050565b6000610e4082610aff565b9150610e4b83610aff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e8057610e7f610c5f565b5b828201905092915050565b6000610e9682610aff565b9150610ea183610aff565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eda57610ed9610c5f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f1f82610aff565b9150610f2a83610aff565b925082610f3a57610f39610ee5565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f6481610f45565b8114610f6f57600080fd5b50565b600081519050610f8181610f5b565b92915050565b6000819050919050565b610f9a81610f87565b8114610fa557600080fd5b50565b600081519050610fb781610f91565b92915050565b600081519050610fcc81610bd7565b92915050565b600080600080600060a08688031215610fee57610fed610a6f565b5b6000610ffc88828901610f72565b955050602061100d88828901610fa8565b945050604061101e88828901610fbd565b935050606061102f88828901610fbd565b925050608061104088828901610f72565b9150509295509295909350565b600061105882610f87565b915061106383610f87565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110a2576110a1610c5f565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110df576110de610c5f565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561111c5761111b610c5f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561115957611158610c5f565b5b82820290509291505056fea26469706673582212205884ea47d5665d1a9955777793bab443136fd2190c47cf3e15bab07a3356d5cf64736f6c63430008080033",
  "devdoc": {
    "author": "0xRonin",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample of funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}